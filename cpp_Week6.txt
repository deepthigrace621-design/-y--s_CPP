6a)

#include <iostream>
using namespace std;
class Number 
{
    int value;
public:
    Number(int v = 0) 
   {
        value = v;
    }
    void display() 
    {
        cout << "Value: " << value << endl;
    }
    Number operator -() 
    {
        return Number(-value);
    }
    Number operator +(const Number &obj) {
        return Number(value + obj.value);
    }
};
int main() 
{
    Number n1(10), n2(20), result;
    cout << "Original Numbers:" << endl;
    n1.display();
    n2.display();
    result = -n1;
    cout << "\nAfter Unary Minus (-n1):" << endl;
    result.display();
    result = n1 + n2;
    cout << "\nAfter Binary Addition (n1 + n2):" << endl;
    result.display();
    return 0;
}





6b)

#include <iostream>
using namespace std;
class Number 
{
private:
    int value;
public:
    Number() : value(0) {} 
 
    Number(int v) : value(v) {}  

    friend Number operator+(const Number &n1, const Number &n2);

    friend Number operator-(const Number &n);

    void display() const 
    {
        cout << "Value: " << value << endl;
    }
};
Number operator+(const Number &n1, const Number &n2) 
{
    return Number(n1.value + n2.value);
}

Number operator-(const Number &n) 
{
    return Number(-n.value);
}

int main() 
{
    Number num1(10), num2(20);

    cout << "Number 1: ";
    num1.display();

    cout << "Number 2: ";
    num2.display();

    Number sum = num1 + num2;
    cout << "After Binary '+' Overloading (num1 + num2): ";
    sum.display();

    Number neg = -num1;
    cout << "After Unary '-' Overloading (-num1): ";
    neg.display();
    return 0;
}

