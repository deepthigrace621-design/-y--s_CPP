12a)

#include <iostream>
#include <vector>
#include <list>
using namespace std;
int main() {
 vector<int> vec;
 vec.push_back(10);
 vec.push_back(20);
 vec.push_back(30);
 vec.insert(vec.begin() + 1, 15);
 vec.pop_back();
 cout << "Vector access at index 1: " << vec[1] << "\n";
 cout << "Vector elements: ";
 for (vector<int>::iterator vit = vec.begin(); vit != vec.end(); ++vit)
{
 cout << *vit << " ";
 }
 list<int> lst;
 lst.push_back(100);
 lst.push_front(50);
 list<int>::iterator it = lst.begin();
 advance(it, 1);
 lst.insert(it, 75);
 lst.pop_back();
 it = lst.begin();
 advance(it, 1);
 cout << "\nList access at second position: " << *it << "\n";
 cout << "List elements: ";
 for (list<int>::iterator lit = lst.begin(); lit != lst.end(); ++lit) {
 cout << *lit << " ";
 }
 return 0;
}





12b)

#include <iostream>
#include <deque>
using namespace std;
int main() {
 deque<int> dq;
 dq.push_back(10);
 dq.push_back(20);
 dq.push_front(5);
 dq.push_front(2);
 cout << "Deque after insertion: ";
 for (deque<int>::iterator it = dq.begin(); it != dq.end(); ++it) {
 cout << *it << " ";
 }
 cout << endl;
 cout << "Front element: " << dq.front() << endl;
 cout << "Back element: " << dq.back() << endl;
 dq.pop_front();
 dq.pop_back();
 cout << "Deque after deletion: ";
 for (deque<int>::iterator it = dq.begin(); it != dq.end(); ++it) {
 cout << *it << " ";}
 cout << endl;
 cout << "Size of deque: " << dq.size() << endl;
 cout << "Is deque empty? " << (dq.empty() ? "Yes" : "No") << endl;
 dq.clear();
 cout << "Deque cleared. Size now: " << dq.size() << endl;
 return 0;
}





12c)

#include <iostream>
#include <map>
using namespace std;
int main() {
 map<int, string> m;
 m[1] = "Apple";
 m[2] = "Banana";
 m[3] = "Cherry";
 m.insert(make_pair(4, "Date"));
 cout << "Access key 2: " << m[2] << "\n";
 m.erase(3);
 cout << "Map elements:\n";
 map<int, string>::iterator it;
 for (it = m.begin(); it != m.end(); ++it) {
 cout << it->first << " => " << it->second << "\n";
 }
 it = m.find(4);
 if (it != m.end()) {
 cout << "Found key 4: " << it->second << "\n";
 } else {
 cout << "Key 4 not found\n";
 }
 return 0;
}

